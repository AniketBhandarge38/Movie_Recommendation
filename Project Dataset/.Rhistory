install.packages("pacman")
install.packages("pacman")
require(pacman)
library(pacman)
pacman :: p_load(pacman,dplyr,GGally,ggplot2,ggthemes,ggvis,httr,lubridate,
plotly,rio,rmarkdown,shiny,stringr,tidyr,recommenderlab
)
library(datasets)
head(iris)
library(recommenderlab)
library(ggplot2)
library(data.table)
library(reshape2)
install.packages(recommenderlab)
install.packages("recommenderlab")
install.packages("ggplot2")
install.packages("ggplot2", lib="C:/Program Files/R/R-4.0.2/library")
install.packages("recommenderlab")
install.packages("recommenderlab")
install.packages("recommenderlab")
install.packages("rvest", lib="E:/R installation/R-4.0.2/library")
forecasts <- read_html("https://forecast.weather.gov/MapClick.php?CityName=San+Francisco+Plaza&state=NM&site=ABQ&textField1=33.6933&textField2=-108.766#.X09zEUIzbIU") %>%
html_nodes(".temp") %>%
html_text()
forecasts <- read_html("https://forecast.weather.gov/MapClick.php?CityName=San+Francisco+Plaza&state=NM&site=ABQ&textField1=33.6933&textField2=-108.766#.X09zEUIzbIU")
library(rvest)
forecasts <- read_html("https://forecast.weather.gov/MapClick.php?CityName=San+Francisco+Plaza&state=NM&site=ABQ&textField1=33.6933&textField2=-108.766#.X09zEUIzbIU")
html_nodes(".temp")
html_text()
forecasts
install.packages("readr", lib="E:/R installation/R-4.0.2/library")
library(readr)
parse_number(forecasts)
library(rvest)
forecasts <- read_html("https://forecast.weather.gov/MapClick.php?CityName=San+Francisco+Plaza&state=NM&site=ABQ&textField1=33.6933&textField2=-108.766#.X09zEUIzbIU")
html_nodes(".temp")
install.packages("selectr", lib="E:/R installation/R-4.0.2/library")
install.packages("xml2", lib="E:/R installation/R-4.0.2/library")
install.packages("jsonlite", lib="E:/R installation/R-4.0.2/library")
library(rvest)
forecasts <- read_html("https://forecast.weather.gov/MapClick.php?CityName=San+Francisco+Plaza&state=NM&site=ABQ&textField1=33.6933&textField2=-108.766#.X09zEUIzbIU")
html_nodes(".temp")
html_text()
forecasts
library(readr)
parse_number(forecasts)
library(rvest)
library(xml2)
library(selectr)
forecasts <- read_html("https://forecast.weather.gov/MapClick.php?CityName=San+Francisco+Plaza&state=NM&site=ABQ&textField1=33.6933&textField2=-108.766#.X09zEUIzbIU")
html_nodes(".temp")
html_text()
forecasts
library(readr)
parse_number(forecasts)
library(stringr, lib.loc = "E:/R installation/R-4.0.2/library")
detach("package:stringr", unload = TRUE)
setwd("E:/R_Projects/Movie Recommendation Project/Project Dataset")
movie_data <- read.csv("movies.csv",stringsAsFactors = FALSE)
rating_data <- read.csv("ratings.csv")
str(movie_data)
str(rating_data)
summary(movie_data)
head(movie_data)
movie_genre <- as.data.frame(movie_data$genres, stringsAsFactors=FALSE)
head(movie_genre)
library(data.table)
movie_genre2 <- as.data.frame(tstrsplit(movie_genre[,1], '[|]',
type.convert=TRUE),stringsAsFactors=FALSE)
head(movie_genre2)
colnames(movie_genre2) <- c(1:10)
head(movie_genre2)
list_genre <- c("Action", "Adventure", "Animation", "Children",
"Comedy", "Crime","Documentary", "Drama", "Fantasy",
"Film-Noir", "Horror", "Musical", "Mystery","Romance",
"Sci-Fi", "Thriller", "War", "Western")
head(list_genre)
genre_mat1 <- matrix(0,10330,18)
head(genre_mat1)
genre_mat1[1,] <- list_genre
head(genre_mat1)
colnames(genre_mat1) <- list_genre
head(genre_mat1)
for (index in 1:nrow(movie_genre2)) {
for (col in 1:ncol(movie_genre2)) {
gen_col = which(genre_mat1[1,] == movie_genre2[index,col])
genre_mat1[index+1,gen_col] <- 1
}
}
genre_mat2 <- as.data.frame(genre_mat1[-1,], stringsAsFactors=FALSE)
head(genre_mat2)
for (col in 1:ncol(genre_mat2)) {
genre_mat2[,col] <- as.integer(genre_mat2[,col])
}
str(genre_mat2)
print(genre_mat2)
head(movie_data)
SearchMatrix <- cbind(movie_data[,1:2],genre_mat2[])
head(SearchMatrix)
library(recommenderlab)
library(reshape2)
head(rating_data)
ratingMatrix <- dcast(rating_data, userId~movieId, value.var = "rating",
na.rm=FALSE)
ratingMatrix <- as.matrix(ratingMatrix[,-1]) #remove userIds
#Convert rating matrix into a recommenderlab sparse matrix
ratingMatrix <- as(ratingMatrix, "realRatingMatrix")
ratingMatrix
recommendation_model <- recommenderRegistry$get_entries(dataType = "realRatingMatrix")
names(recommendation_model)
lapply(recommendation_model, "[[", "description")
recommendation_model$IBCF_realRatingMatrix$parameters
similarity_mat <- similarity(ratingMatrix[1:4, ],
method = "cosine",
which = "users")
as.matrix(similarity_mat)
image(as.matrix(similarity_mat), main = "User's Similarities")
movie_similarity <- similarity(ratingMatrix[, 1:4], method =
"cosine", which = "items")
as.matrix(movie_similarity)
image(as.matrix(movie_similarity), main = "Movies similarity")
rating_values <- as.vector(ratingMatrix@data)
unique(rating_values)
Table_of_Ratings <- table(rating_values)
Table_of_Ratings
print(ratingMatrix)
library(ggplot2)
movie_views  <- colCounts(ratingMatrix)
head(movie_views)
table_views <- data.frame(movie = names(movie_views),views = movie_views)
head(table_views)
table_views <- table_views[order(table_views$views, decreasing = TRUE), ]
head(table_views)
table_views$title <- NA
head(table_views)
for (index in 1:10325){
table_views[index,3] <- as.character(subset(movie_data,
movie_data$movieId == table_views[index,1])$title)
}
head(table_views)
ggplot(table_views[1:6,],aes(x=title,y=views))+
geom_bar(stat = "identity", fill = 'steelblue')+
geom_text(aes(label=views),vjust=-0.3,size=3.5)+
theme(axis.text = element_text(angle = 45,hjust=1))+
ggtitle("Toatal views of top films")
image(ratingMatrix[1:20, 1:25], axes = FALSE,
main = "Heatmap of the first 25 rows and 25 columns")
head(ratingMatrix)
movie_ratings <- ratingMatrix[rowCounts(ratingMatrix) > 50,
colCounts(ratingMatrix) > 50]
movie_ratings
minimum_movies<- quantile(rowCounts(movie_ratings), 0.98)
minimum_users <- quantile(colCounts(movie_ratings), 0.98)
image(movie_ratings[rowCounts(movie_ratings) > minimum_movies,
colCounts(movie_ratings) > minimum_users],
main = "Heatmap of the top users and movies")
average_ratings <- rowMeans(movie_ratings)
average_ratings
qplot(average_ratings, fill=I("steelblue"), col=I("red")) +
ggtitle("Distribution of the average rating per user")
normalized_ratings <- normalize(movie_ratings)
sum(rowMeans(normalized_ratings) > 0.00001)
image(normalized_ratings[rowCounts(normalized_ratings) > minimum_movies,
colCounts(normalized_ratings) > minimum_users],
main = "Normalized Ratings of the Top Users")
binary_minimum_movies <- quantile(rowCounts(movie_ratings), 0.95)
binary_minimum_users <- quantile(colCounts(movie_ratings), 0.95)
#movies_watched <- binarize(movie_ratings, minRating = 1)
good_rated_films <- binarize(movie_ratings, minRating = 3)
